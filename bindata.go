// Code generated by go-bindata.
// sources:
// examples/default/default.hs.js
// VERSION
// DO NOT EDIT!

package hs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplesDefaultDefaultHsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\xeb\x6e\x14\xc7\x12\xfe\x0d\x4f\x51\x5a\x21\x66\xd7\x66\x66\x6c\xe4\x73\x0e\xc7\x09\x90\x44\x24\x71\x22\x12\x90\x4c\x94\x48\x40\x50\xef\x4c\xed\x4e\xc7\x33\xdd\x4d\x77\xcf\x5e\x02\xce\xb3\xe4\x59\xf2\x64\xa9\xee\xb9\x8f\x77\x37\x46\x8a\x41\x78\xb7\x2f\x5f\xdd\xbf\xaa\x86\x5b\x2c\xa6\x1f\x52\x34\xc9\x39\x04\x17\xd2\x9a\x0c\xf3\x3c\xb8\x7e\x00\x8b\x52\x24\x96\x4b\x31\x9d\xc1\x87\xbb\x77\x81\x7e\x72\x2e\xca\x0d\x3c\x06\xdc\x60\x32\x0d\x4a\xc1\x0a\x0c\x66\x11\x17\x29\x6e\x5e\x2c\xa6\xc1\x73\xb7\x1d\xcc\xe0\x09\x84\xa7\xfe\xfc\x5c\xcb\xb5\x41\x4d\x37\xaa\x9b\x4f\x21\x30\x28\x0c\x9f\xe7\x18\xd6\x7b\x01\x9c\xff\xf5\x67\x20\x15\x8a\xa0\x92\xd1\x57\x67\xf2\x2a\xe3\x06\xe8\x6f\xab\x96\x81\x14\x17\xac\xcc\x2d\x14\x28\xca\x07\x90\x72\xa3\x72\xb6\xc5\x14\xd6\x19\x0a\x10\xd2\xed\x73\xc1\x9d\xde\xb0\xe0\x39\xba\xdb\x4a\xcb\x15\x4f\x31\x8d\xde\x88\xc9\xf5\xec\xb3\x1d\x72\x00\x9e\x49\x11\x58\xb8\x12\x72\x4d\x48\xcc\xb6\x12\xdd\x7d\x36\x97\xa5\x85\xa7\xf5\xed\xee\xf2\x15\x6e\xc9\x65\x2c\x20\x35\x2a\x98\x0b\x6e\xdd\x77\xb0\x12\x96\x68\xdd\x2f\x0f\xc8\xed\x64\xa7\x3b\x6f\xa8\x31\x10\x0a\x89\x2c\x0a\x26\xd2\x90\x7c\x87\xc0\x94\xca\x79\xc2\xbc\x5d\x84\x8b\x8b\x05\x4f\x38\x0a\x9b\x6f\x41\x63\xc2\xe8\x0e\x1d\x05\x93\x31\x8d\xcd\x45\x33\xb0\xd7\x0b\x13\x02\xf5\x33\x2c\x24\x3c\x6e\xd7\xc8\x76\x88\xe3\xe6\x8e\xd7\xc7\xd0\x3d\x38\x1e\x9c\xe8\x1b\xac\x5b\x83\x03\x8d\xc6\x32\x6d\x49\x3b\x96\x64\x48\xeb\x49\x91\xd2\xb2\x29\x53\x09\x14\xdc\x15\x4f\xb0\xde\x7b\x08\xf5\xd9\xe0\x7a\x76\x18\xde\x74\xf0\x66\x2b\x92\x4c\x4b\xc1\x7f\x47\xb0\xbc\x18\x09\x88\x4b\xa3\x63\x33\xe7\x22\x16\x56\xa5\xcc\x22\x28\x29\xf3\x88\xbe\x44\x52\x2f\x77\xca\xb9\xb9\x42\xa6\x9b\x72\xee\x92\xc9\x47\x4d\xcb\x52\x41\x2e\x97\xa4\x6d\x4e\x88\x69\xeb\xcb\xc3\x3a\xe7\x9d\xce\x95\xb9\x0e\xc3\x8c\x8b\xe8\x26\xc6\xbe\x4c\x0a\x58\x92\xa0\x31\x11\xa1\xb4\x36\xe7\xb4\x00\xc7\xdf\x40\xbc\x62\x3a\xa6\x8d\xb8\x76\x6c\xdc\x3b\xbb\xcb\xe6\xa1\x0c\xec\x64\xa0\xd6\x52\xdf\x4e\x44\x77\x74\x97\x04\xbf\xd6\x65\x59\xea\x13\x0c\x26\x03\x62\x71\x8b\x3b\xfd\xd1\x4b\xca\x63\x42\x1b\x61\x0d\xca\xe3\x07\x8a\x12\x15\x06\x65\xb8\x2f\x72\x8a\x4e\x69\xb8\x58\x52\xa9\x7c\xcf\x56\xec\x32\xd1\x5c\x59\x0a\x98\x58\xf0\x65\xa9\xab\x52\x79\x76\xf9\x3c\x82\xaf\x37\xac\x50\x44\x05\xe7\xbd\x0a\x1e\x83\x3b\xfd\xae\x67\xbb\xe5\x7a\x16\x4a\x34\x52\x42\x18\xb0\x14\xdc\x85\xcc\x73\xb9\x76\xa2\x7d\xe2\x8c\x71\x71\xc5\xf2\x69\x6b\xd6\x6c\x8f\x35\x6f\x04\xfc\xcc\x84\x67\x89\x1c\x99\x16\x50\x48\xb2\xac\x62\x99\xd1\x8d\x2a\x74\xc5\x88\x68\x0a\x4f\x34\x8e\x3a\xfb\xfc\xa8\xd8\x12\x27\x75\x40\x1b\xfe\x3d\x86\x00\x32\x6b\x95\x39\x8f\xe3\x25\xb7\x59\x39\x8f\x28\xaf\xe3\xdf\xca\x9c\x28\xa4\x90\x65\x21\x30\xce\x28\x5d\x0f\xa8\xea\x24\x3a\xd3\x0d\x65\x04\xce\x99\xf6\xd5\x22\xdd\xbf\x6e\x55\x69\x5c\x71\x49\xc1\xf1\xfe\x90\x1a\x12\xab\xf3\xe3\xc4\x6d\xbf\x2f\x79\xc7\xa6\x8d\x69\x8d\xa4\xb1\x14\x80\x0b\xb6\x72\x7e\xb5\x54\x88\xd4\x25\x60\x4d\xda\xba\xdb\xb5\x71\x0d\x4b\x79\x4a\x94\xca\x85\xd8\xec\xe3\xe5\x6c\xe4\xae\xcc\xbb\xab\x6e\x18\x5e\x6b\x02\x55\x8d\xab\x82\xcc\x40\x18\xba\x95\x60\xbf\x72\x4d\xbc\x0c\x22\xf5\x40\x9f\x54\x06\xe4\xa2\x25\x89\x7d\xaa\xe0\x48\x15\x0c\xfe\xa9\x21\x54\xf7\xd6\x5d\xb1\xae\x29\xfb\x32\x0a\xe5\xfd\x8a\x08\xc7\xd7\xdd\xcd\x3b\xe3\xeb\x49\x77\x9d\xaa\x38\xb9\xf2\x46\xd7\x40\x6d\xcd\x27\xa5\xce\x61\x6d\xad\xa6\x3e\x1e\xd4\xe1\xb9\x81\xf4\xef\x71\xf2\x6e\x7c\xdb\x33\x94\xd9\x24\xf3\x9a\x3a\x74\x97\x63\xf3\x6d\x2b\xa3\xda\x0c\x05\x9c\x82\x03\x77\x78\x77\xfa\xf9\x74\x40\xef\xcb\xcb\x0b\xd8\xca\x52\x53\x99\x19\x6a\x58\x9e\x33\x89\x41\x5c\x97\x42\x7d\x83\xaa\x5b\xb4\x31\x62\x8f\xe9\x73\x49\x7d\x37\x23\xb4\xce\x05\x26\x83\x6e\xb5\x57\xc6\x63\x94\x65\x87\xf2\xad\xc6\x0d\xbc\xa4\x64\xe7\x09\x7c\xe9\xb5\x82\x9f\x7e\xfc\xee\x97\x01\xa6\xc0\x75\x49\x8a\x7e\xb1\xa4\xb3\x7d\x3f\x1e\x32\x7d\xd1\x23\xfa\x94\x92\xce\xdb\x3e\x24\x47\x37\x1f\xdd\xde\xf2\x79\x07\xb8\xe2\x05\xfc\x11\x47\x73\x66\xb2\x77\x34\x5c\x39\x9c\x56\xdf\x5d\x7b\x07\x3c\xf1\x55\x4f\xcd\x82\x25\x66\x2f\xee\xee\xdd\x03\xc8\xd9\x50\xdf\x18\x6d\x12\xbb\xb8\x98\x61\xc6\x8e\xf6\x0e\x00\x5e\x8c\x55\xdd\x07\x79\x63\xf7\x16\xe1\x12\x1d\xb8\x40\xbb\x96\xfa\x8a\x4a\xdd\x6c\x0d\x1d\x81\xd2\xf2\xfc\xf6\x71\xea\x05\x9e\x9a\x64\x0a\x16\x37\x96\x9a\x6c\x1d\xed\xd6\x9d\x49\x26\x5d\x21\x4d\x5e\xbb\x84\x75\xa0\x6f\xe1\xb5\x62\xd6\xa2\xa6\x4f\x13\xb8\x7f\x9f\x46\x20\x46\x4c\x0b\xca\x7d\xa6\xcc\x53\x10\x6a\xb1\x36\x70\x2f\x87\x10\xe1\x9e\x3a\xe4\x2a\xd9\xe8\x40\xb3\x7d\x45\x3d\xbe\x2c\x88\x0c\xb4\xdd\xa1\x82\x5b\xee\x0b\xf5\x22\x49\x2b\xf8\x1c\xe2\x14\x57\xb1\x4d\x54\x7c\xfa\xf0\x7f\xd1\x09\xfd\x39\x8d\x0f\x8b\x2e\xfb\x54\x55\xb9\x4f\x0d\x78\xaa\xfe\xba\x13\x62\xb0\xe4\x7e\x5a\x22\xbd\xb1\x53\xcb\xf0\x6c\x52\x9a\xde\xa4\xb8\xe3\x6c\xcf\xde\x09\xcd\x12\x56\xea\xed\x04\x3e\x82\xcb\x64\x08\x39\x3c\x7c\xe2\xad\x14\x25\x4d\xf1\x1f\xc1\x61\x4d\x4c\xfc\x2b\x1c\xbd\x3e\x09\xff\xff\xf6\x08\x8e\xe2\xd8\x9d\x36\xe4\x24\xfa\x55\x0a\xfe\x1e\xc2\xa4\x59\x08\x85\xa6\x8f\x19\x79\x2d\x18\x88\x3d\xe0\x21\xd5\x79\x48\x55\xbc\xc3\x15\xb0\x34\xd5\x8e\x7b\x28\xd4\x28\x9b\x94\x18\x36\x09\x37\x41\xd0\x00\xc1\x15\x17\x0b\x19\x71\xf9\x49\x2e\xe4\xfb\x5d\xc8\x85\x4b\x3a\xf4\xa3\x9b\x40\x9f\xe0\x34\x66\x20\xa6\x7b\x3d\xb9\x76\xaf\xab\xf0\x05\x74\x6e\xab\x75\xa3\xa9\x1d\x99\x41\x13\x95\xf3\x52\xd8\xd2\x4f\x39\xa7\x67\xd1\xc9\x59\x74\x16\x57\x4b\x61\xfd\x35\x24\xe1\x57\x56\xaa\x90\x15\xe9\x7f\xcf\x22\x6e\xe4\xad\xfd\xd7\x23\x6f\xe5\x66\x15\xff\xb6\x75\xb4\x0c\xd3\x6e\xec\xa1\x20\xab\x59\xeb\xbf\xe1\xb9\x43\xe9\xdb\xef\xb4\xae\x35\x01\xb9\x5e\xd3\x3b\x8f\x06\x17\x7a\xe7\xb9\xcc\x01\x72\x8f\x2b\x18\x78\x74\xf2\xe8\xb4\x93\xb0\xb5\x19\x6d\x84\x05\x5c\x72\x37\x97\x5c\xbc\x7a\xf5\xf2\xd2\xf7\xb6\xea\xdc\x2d\x28\x68\xd0\xda\x96\x7b\xba\xc3\xad\x1a\x23\x73\x35\xe1\xdb\x7f\xda\x70\x58\x87\xd8\x3e\x36\x68\xe0\xa2\x77\x7c\xf3\xd6\x68\xb2\xf8\x80\x6f\x7a\xef\x23\xff\x52\x19\xbc\x4e\x3e\xed\x11\x33\x90\xf1\x2e\x42\x3a\x31\xad\xfe\x57\xc3\xa9\x95\x76\x6a\xc5\x47\xd1\x51\xad\x9a\xe3\xaa\xff\x04\xb3\x88\x06\x48\x6e\xa7\xc1\x1b\x11\xcc\x7a\xce\xc1\xfc\x01\xf0\xcd\x98\x98\x47\x26\xf0\xcd\xd0\x82\x80\x46\x73\x77\x71\xa8\x79\xb5\x3a\x52\x72\x18\xc0\xfa\xd7\xf5\xec\xef\x00\x00\x00\xff\xff\x42\x01\x9a\x1a\xbe\x11\x00\x00")

func examplesDefaultDefaultHsJsBytes() ([]byte, error) {
	return bindataRead(
		_examplesDefaultDefaultHsJs,
		"examples/default/default.hs.js",
	)
}

func examplesDefaultDefaultHsJs() (*asset, error) {
	bytes, err := examplesDefaultDefaultHsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/default/default.hs.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _version = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x32\xd0\x33\xd4\x33\x00\x04\x00\x00\xff\xff\xb1\x21\x99\x2f\x05\x00\x00\x00")

func versionBytes() ([]byte, error) {
	return bindataRead(
		_version,
		"VERSION",
	)
}

func version() (*asset, error) {
	bytes, err := versionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "VERSION", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"examples/default/default.hs.js": examplesDefaultDefaultHsJs,
	"VERSION": version,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"VERSION": &bintree{version, map[string]*bintree{}},
	"examples": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"default.hs.js": &bintree{examplesDefaultDefaultHsJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

