// Code generated by go-bindata.
// sources:
// examples/default/default.hs.js
// VERSION
// DO NOT EDIT!

package hotshell

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplesDefaultDefaultHsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\xeb\x6e\x14\x47\x16\xfe\x0d\x4f\x71\x34\x42\xf4\x8c\x4d\x77\xdb\xc8\xbb\xcb\x9a\x05\x36\x11\x49\x9c\x88\x04\x24\x13\x25\x12\x10\x54\xd3\x7d\x66\xba\xe2\xee\xaa\xa2\xaa\x7a\x2e\x01\xe7\x59\xf2\x2c\x79\xb2\x9c\xaa\xbe\xb7\x67\x26\x46\x8a\x41\x8c\xa7\x2e\xdf\xb9\x7f\xe7\x14\xdc\x62\x31\xfd\x98\xa2\x49\xce\x21\xb8\x90\xd6\x64\x98\xe7\xc1\xf5\x03\x58\x94\x22\xb1\x5c\x8a\xe9\x0c\x3e\xde\xbd\x0b\xf4\x93\x73\x51\x6e\xe0\x09\xe0\x06\x93\x69\x50\x0a\x56\x60\x30\x8b\xb8\x48\x71\xf3\x72\x31\x0d\x5e\xb8\xed\x60\x06\x4f\x21\x3c\xf5\xe7\xe7\x5a\xae\x0d\x6a\xba\x51\xdd\x7c\x06\x81\x41\x61\xf8\x3c\xc7\xb0\xde\x0b\xe0\xfc\xcf\x3f\x02\xa9\x50\x04\x95\x8c\xbe\x3a\x93\xd7\x19\x37\x40\x7f\x5b\xb5\x0c\xa4\xb8\x60\x65\x6e\xa1\x40\x51\x3e\x80\x94\x1b\x95\xb3\x2d\xa6\xb0\xce\x50\x80\x90\x6e\x9f\x0b\xee\xf4\x86\x05\xcf\xd1\xdd\x56\x5a\xae\x78\x8a\x69\xf4\x56\x4c\xae\x67\x8f\x77\xc8\x01\x78\x2e\x45\x60\xe1\x4a\xc8\x35\x21\x31\xdb\x4a\x74\xf7\xd9\x5c\x96\x16\x9e\xd5\xb7\xbb\xcb\x57\xb8\x25\x97\xb1\x80\xd4\xa8\x60\x2e\xb8\x75\xdf\xc1\x4a\x58\xa2\x75\x1f\x1e\x90\xdb\xc9\x4e\x77\xde\x50\x63\x20\x14\x12\x59\x14\x4c\xa4\x21\xf9\x0e\x81\x29\x95\xf3\x84\x79\xbb\x08\x17\x17\x0b\x9e\x70\x14\x36\xdf\x82\xc6\x84\xd1\x1d\x3a\x0a\x26\x63\x1a\x9b\x8b\x66\x60\xaf\x17\x26\x04\xea\xe7\x58\x48\x78\xd2\xae\x91\xed\x10\xc7\xcd\x1d\xaf\x8f\xa1\x7b\x70\x3c\x38\xd1\x37\x58\xb7\x06\x07\x1a\x8d\x65\xda\x92\x76\x2c\xc9\x90\xd6\x93\x22\xa5\x65\x53\xa6\x12\x28\xb8\x2b\x9e\x60\xbd\xf7\x10\xea\xb3\xc1\xf5\xec\x30\xbc\xe9\xe0\xcd\x56\x24\x99\x96\x82\xff\x86\x60\x79\x31\x12\x10\x97\x46\xc7\x66\xce\x45\x2c\xac\x4a\x99\x45\x50\x52\xe6\x11\x7d\x89\xa4\x5e\xee\x94\x73\x73\x85\x4c\x37\xe5\xdc\x25\x93\x8f\x9a\x96\xa5\x82\x5c\x2e\x49\xdb\x9c\x10\xd3\xd6\x97\x87\x75\xce\x3b\x9d\x2b\x73\x1d\x86\x19\x17\xd1\x4d\x8c\x7d\x99\x14\xb0\x24\x41\x63\x22\x42\x69\x6d\xce\x69\x01\x8e\xbf\x86\x78\xc5\x74\x4c\x1b\x71\xed\xd8\xb8\x77\x76\x97\xcd\x43\x19\xd8\xc9\x40\xad\xa5\xbe\x9d\x88\xee\xe8\x2e\x09\x7e\xad\xcb\xb2\xd4\x27\x18\x4c\x06\xc4\xe2\x16\x77\xfa\xa3\x97\x94\xc7\x84\x36\xc2\x1a\x94\xc7\xf7\x14\x25\x2a\x0c\xca\x70\x5f\xe4\x14\x9d\xd2\x70\xb1\xa4\x52\xf9\x8e\xad\xd8\x65\xa2\xb9\xb2\x14\x30\xb1\xe0\xcb\x52\x57\xa5\xf2\xfc\xf2\x45\x04\x5f\x6d\x58\xa1\x88\x0a\xce\x7b\x15\x3c\x06\x77\xfa\x5d\xcf\x76\xcb\xf5\x2c\x94\x68\xa4\x84\x30\x60\x29\xb8\x0b\x99\xe7\x72\xed\x44\xfb\xc4\x19\xe3\xe2\x8a\xe5\xd3\xd6\xac\xd9\x1e\x6b\xde\x0a\xf8\x89\x09\xcf\x12\x39\x32\x2d\xa0\x90\x64\x59\xc5\x32\xa3\x1b\x55\xe8\x8a\x11\xd1\x14\x9e\x68\x1c\x75\xf6\xf9\x51\xb1\x25\x4e\xea\x80\x36\xfc\x7b\x0c\x01\x64\xd6\x2a\x73\x1e\xc7\x4b\x6e\xb3\x72\x1e\x51\x5e\xc7\xbf\x96\x39\x51\x48\x21\xcb\x42\x60\x9c\xb5\xcc\x7f\x40\x61\x27\xd7\x39\xc0\x50\x5e\xe0\x9c\x69\x5f\x33\xd2\xfd\xeb\x56\x95\xc6\x15\x97\x14\x22\xef\x15\xa9\x21\xb1\x3a\x3f\x4e\xdc\xf6\x87\x92\x77\x9c\xda\x18\xd8\x48\x1a\x4b\x01\xb8\x60\x2b\xe7\x5d\x4b\xe5\x48\xbd\x02\xd6\xa4\xb3\xbb\x5d\x9b\xd8\x70\x95\x27\x46\xa9\x5c\xa0\xcd\x3e\x76\xce\x46\x4e\xcb\xbc\xd3\xea\xb6\xe1\xb5\x26\x50\xd5\x38\x2c\xc8\x0c\x84\xa1\x5b\x09\xf6\x2b\xd7\x44\xcd\x20\x52\x27\xf4\xa9\x65\x40\x2e\x5a\xaa\xd8\xa7\x0a\x8e\x54\xc1\xe0\xef\xda\x42\x75\x6f\xdd\x95\xec\x9a\x72\x30\xa3\x80\xde\xaf\xe8\x70\x7c\xdd\xdd\xbc\x33\xbe\x9e\x74\xd7\xa9\x96\x93\x2b\x6f\x74\x0d\xd4\x56\x7e\x52\xea\x1c\xd6\xd6\x6a\xea\xe6\x41\x1d\x9e\x1b\x48\xff\x1c\x33\xef\xc6\xb7\x3d\x43\x99\x4d\x32\xaf\xa9\x43\x77\x39\x36\xdf\xb6\x32\xaa\xcd\x50\xc0\x29\x38\x70\x87\x77\xa7\x9f\x4f\x07\xf4\xbe\xbc\xbc\x80\xad\x2c\x35\x15\x9b\xa1\xb6\xe5\x99\x93\x78\xc4\xf5\x2a\xd4\x37\x08\xbb\x45\x1b\x23\xf6\xf8\x3e\x97\xd4\x7d\x33\x42\xeb\x5c\x60\x32\xe8\x56\x7b\xc5\x3c\x46\x59\x76\x28\xdf\x68\xdc\xc0\x2b\x4a\x76\x9e\xc0\x17\x5e\x2b\xf8\xf1\x87\x6f\x7f\x1e\x60\x0a\x5c\x97\xa4\xe8\xff\x97\x74\xb6\xef\xc7\x43\xa6\x2f\x7a\x74\x9f\x52\xd2\x79\xdb\x87\x14\xe9\xa6\xa4\xdb\x5b\x3e\xef\x00\x57\xbc\x80\xdf\xe3\x68\xce\x4c\xf6\x9e\x46\x2c\x87\xd3\xea\xbb\x6b\xef\x80\x27\xbe\xec\xa9\x59\xb0\xc4\xec\xc5\xdd\xbd\x7b\x00\x39\x1b\xea\x1b\xa3\x4d\x62\x17\x17\x33\xcc\xd8\xd1\xde\x01\xc0\x8b\xb1\xaa\xfb\x20\x6f\xec\xde\x22\x5c\xa2\x03\x17\x68\xd7\x52\x5f\x51\xa9\x9b\xad\xa1\x23\x50\x5a\x9e\xdf\x3e\x4e\xbd\xc0\x53\xab\x4c\xc1\xe2\xc6\x52\xab\xad\xa3\xdd\xba\x33\xc9\xa4\x2b\xa4\xc9\x1b\x97\xb0\x0e\xf4\x1d\xbc\x51\xcc\x5a\xd4\xf4\xdb\xe4\x31\x8d\x41\x8c\x78\x16\xd4\x63\x1a\x8d\x50\x41\xa8\xc5\xda\xc0\xbd\x1c\x42\x84\x7b\xea\x90\x9b\x64\x23\x9f\xa6\xfb\x8a\x76\x7c\x49\x10\x11\x68\xbb\x43\xbc\x5b\xee\x04\x92\x38\xd2\x06\xfe\x07\x71\x8a\xab\xd8\x26\x2a\x3e\x7d\xf8\x9f\xe8\x84\xfe\x9c\xc6\x87\xc5\x96\x7d\x8a\xaa\xdc\xa6\x06\xfc\x54\x7f\xdd\x09\x31\x58\x72\x3f\x2d\x81\xde\xd8\xa9\x65\x78\x16\x29\x4d\x6f\x4e\xdc\x71\xb6\x67\xeb\x84\x26\x09\x2b\xf5\x76\x02\x9f\xc0\x65\x30\x84\x1c\x1e\x3e\xf5\x56\x8a\x92\x66\xf8\x4f\xe0\xb0\x26\x26\xfe\x05\x8e\xde\x9c\x84\xff\x7d\x77\x04\x47\x71\xec\x4e\x1b\x72\x10\x7d\x94\x82\x7f\x80\x30\x69\x16\x42\xa1\xe9\xd7\x8c\x7c\x16\x0c\xc4\x1e\xf0\x90\xea\x3c\xa4\x2a\xbe\xe1\x0a\x58\x9a\x6a\xc7\x39\xf7\xe9\xdd\x22\x9b\x54\x18\x36\x07\x37\x3f\xd0\xf8\xc0\x15\x17\x0b\x19\x71\xf9\x59\x2e\xe4\xfb\x5d\xc8\x85\x4b\x36\xf4\x83\x9b\x40\x9f\xd8\x34\x5e\x20\xa6\x7b\x3d\xb9\x76\x6f\xab\xf0\x25\x74\x6e\xab\x75\xa3\x99\x1d\x99\x41\x13\x95\xf3\x52\xd8\xd2\xcf\x38\xa7\x67\xd1\xc9\x59\x74\x16\x57\x4b\x61\xfd\x35\x24\xe1\x57\x56\xaa\x90\x15\xe9\xbf\xcf\x22\x6e\xe4\xad\xfd\xd7\x23\x6d\xe5\x66\x14\xff\xb2\x75\x74\x0c\xd3\x6e\xdc\xa1\x20\xab\x59\xeb\xbf\xe1\xb9\x43\xe9\xdb\xef\xb0\xae\x25\x01\xb9\x5e\xd3\x2b\x8f\x06\x16\x7a\xe5\xb9\xcc\x01\x72\x8f\x2b\x16\x78\x74\xf2\xe8\xb4\x93\xb0\xb5\x19\x6d\x84\x05\x5c\x72\x37\x8f\x5c\xbc\x7e\xfd\xea\xd2\xf7\xb4\xea\xdc\x2d\xa8\x67\xd0\xd2\x96\x7b\xba\xc2\xad\x1a\x22\x73\x35\xe1\xdb\x7e\xda\x70\x57\x87\xd8\x3e\x35\x68\xd0\xa2\x57\x7c\xf3\xd2\x68\xb2\xf8\x80\x6f\x7a\xaf\x23\xff\x4e\x19\xbc\x4d\x3e\xef\x09\x33\x90\xf1\x7e\x5a\xfd\x77\x86\xd3\x28\xed\x34\x8a\x8f\xa2\xa3\x5a\x2b\x47\x51\xff\x0a\x66\x11\xcd\x8c\xdc\x4e\x83\xb7\x22\x98\xcd\x22\x24\xd8\x69\xeb\x1c\xcc\x1f\x00\xdf\x8c\x09\x79\x64\x02\xdf\x0c\x2d\x08\x68\x30\x77\x17\x87\x9a\x57\xab\x23\x25\x87\x01\xac\x3f\xae\x67\x7f\x05\x00\x00\xff\xff\x01\xb5\x31\x81\xbc\x11\x00\x00")

func examplesDefaultDefaultHsJsBytes() ([]byte, error) {
	return bindataRead(
		_examplesDefaultDefaultHsJs,
		"examples/default/default.hs.js",
	)
}

func examplesDefaultDefaultHsJs() (*asset, error) {
	bytes, err := examplesDefaultDefaultHsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/default/default.hs.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _version = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x32\xd0\x33\xd4\x33\x00\x04\x00\x00\xff\xff\xb1\x21\x99\x2f\x05\x00\x00\x00")

func versionBytes() ([]byte, error) {
	return bindataRead(
		_version,
		"VERSION",
	)
}

func version() (*asset, error) {
	bytes, err := versionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "VERSION", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"examples/default/default.hs.js": examplesDefaultDefaultHsJs,
	"VERSION": version,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"VERSION": &bintree{version, map[string]*bintree{}},
	"examples": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"default.hs.js": &bintree{examplesDefaultDefaultHsJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

