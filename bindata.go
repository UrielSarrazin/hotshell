// Code generated by go-bindata.
// sources:
// examples/default/default.hs.js
// VERSION
// DO NOT EDIT!

package hotshell

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _examplesDefaultDefaultHsJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\xfd\x8e\xd4\x46\x12\xff\x9f\xa7\x28\x8d\x10\x9e\xd9\xc5\xf6\x2e\xda\xbb\xe3\xe0\x80\xbb\x13\x77\xb7\x17\x91\x80\xb4\x44\x89\x04\x04\xf5\xd8\x35\xe3\xce\xda\xdd\x4d\x77\x7b\x3e\x02\x9b\x67\xc9\xb3\xe4\xc9\x52\xdd\xf6\xf8\x6b\xc6\xc3\xae\x94\x05\x31\x3b\xfd\x51\x1f\xbf\xaa\xfa\x55\x35\xdc\x62\x31\xfd\x9c\xa2\x49\x9e\x40\x70\x29\xad\xc9\x30\xcf\x83\x9b\x87\xb0\x28\x45\x62\xb9\x14\x30\x9d\xc1\xe7\x7b\xf7\x80\x7e\x72\x2e\xca\x0d\x3c\x03\xdc\x60\x32\x0d\x4a\xc1\x0a\x0c\x66\x11\x17\x29\x6e\x5e\x2f\xa6\xc1\x2b\xb7\x1d\xcc\xe0\x39\x84\xe7\xfe\xfc\x5c\xcb\xb5\x41\x4d\x37\xaa\x9b\x2f\x20\x30\x28\x0c\x9f\xe7\x18\xd6\x7b\x01\x90\x5a\xa9\x50\x04\x95\x8a\xae\x39\x93\xb7\x19\x37\x40\x7f\x1b\xb3\x0c\xa4\xb8\x60\x65\x6e\xa1\x40\x51\x3e\x84\x94\x1b\x95\xb3\x2d\xa6\xb0\xce\x50\x80\x90\x6e\x9f\x0b\xee\xed\x5e\xf0\x1c\xdd\x6d\xa5\xe5\x8a\xa7\x98\x46\xef\xc5\xe4\x66\xf6\xf4\x80\x1e\x80\x97\x52\x04\x16\xae\x85\x5c\x93\x24\x66\x1b\x8d\xee\x3e\x9b\xcb\xd2\xc2\x8b\xfa\x76\x7b\xf9\x1a\xb7\x64\x3b\x0b\xc8\x8c\x4a\xcc\x25\xb7\xee\x3b\x58\x09\x4b\xb4\xee\xc3\x0b\xe4\x76\x72\x18\xce\x3d\x3b\x7a\x5a\x21\x91\x45\xc1\x44\x1a\x12\x76\x08\x4c\xa9\x9c\x27\xcc\x4b\x20\xc1\xb8\x58\xf0\x84\xa3\xb0\xf9\x16\x34\x26\x8c\xee\xd0\x51\x30\x19\xd3\xb8\xbb\x68\x7a\x0e\x7b\x65\x42\xa0\x7e\x89\x85\x84\x67\xcd\x9a\xfb\x21\x00\x20\x8e\x77\xf7\xbc\x4d\x86\xee\xc2\xe9\xde\xa9\xae\xe7\xba\xf1\x3c\xd0\x68\x2c\xd3\x96\xac\x64\x49\x86\xb4\x9e\x14\x29\x2d\x9b\x32\x95\x40\x41\x5e\xf1\x04\xeb\xbd\x47\x50\x9f\x0d\x6e\x66\x5f\x57\x61\x5a\x15\x66\x2b\x92\x4c\x4b\xc1\x7f\x41\xb0\xbc\x18\x28\x89\x4b\xa3\x63\x33\xe7\x22\x16\x56\xa5\xcc\x22\x28\x29\xf3\x88\xbe\x44\x52\x2f\x47\x75\x1d\x5e\x25\x28\x4c\x39\x77\x19\xe6\x43\xa9\x65\xa9\x20\x97\x4b\xb2\x3c\x27\xc9\x69\x83\xef\xd7\xed\xcf\x5b\xfb\x2b\xf7\x9d\x1c\xb3\x57\x5d\x87\x05\x8d\xe5\x59\xc0\x92\x04\x8d\x89\x48\x54\x03\x42\x4e\x0b\x70\xfa\x5f\x88\x57\x4c\xc7\xb4\x11\xd7\x68\xc7\x9d\xb3\x63\x20\xf4\xf5\x60\xab\x07\xb5\x96\xfa\x76\x6a\xda\xa3\x63\x5a\xfc\x7a\x9b\x8a\xa9\xcf\x42\x98\xf4\xe8\xc7\x2d\x1e\x06\xa7\x93\xba\xa7\x24\x6e\x20\xac\x57\x44\xdf\x52\xdc\xa8\x7c\xa8\x0e\x3c\x17\x50\xbc\x4a\xc3\xc5\x92\x0a\xea\x1b\xb6\x62\x57\x89\xe6\xca\x52\x08\xc5\x82\x2f\x4b\x5d\x15\xd4\xcb\xab\x57\x11\xfc\x67\xc3\x0a\x45\x8c\xf1\xa4\x53\xe8\x43\xe1\xce\xc0\x9b\xd9\x61\xbd\x9e\xac\x12\x8d\x94\x22\x06\x2c\x85\x7a\x21\xf3\x5c\xae\x9d\x6a\x9f\x4a\x43\xb9\xb8\x62\xf9\xb4\x71\x6b\x36\xe2\xcd\x7b\x01\x3f\x30\xe1\xc9\x24\x47\xa6\x05\x14\x92\x3c\xab\xc8\x68\x70\xa3\x8a\x5f\x31\xe0\xa3\xc2\xf3\x91\x63\xd8\x2e\x8d\x2a\xb6\xc4\x49\x1d\xd5\x1d\x4b\x9f\x42\x00\x99\xb5\xca\x3c\x89\xe3\x25\xb7\x59\x39\x8f\x28\xd3\xe3\x9f\xcb\x9c\x88\xa6\x90\x65\x21\x30\xce\x9a\x06\x71\xc4\x60\xa7\xd7\x01\x60\x28\x39\x70\xce\xb4\xaf\x22\xe9\xfe\x75\xab\x4a\xe3\x8a\x4b\x0a\x91\x47\x45\x6a\x48\xac\xce\x4f\x13\xb7\xfd\xa9\xe4\x2d\xf5\xee\x1c\xdc\x69\x1a\x6a\x01\xb8\x64\x2b\x87\xae\xa5\x02\xa5\x8e\x02\x6b\xb2\xd9\xdd\xae\x5d\xdc\xb1\x99\xa7\x4f\xa9\x5c\xa0\xcd\x18\x89\x67\x03\xd0\x32\x0f\x5a\xdd\x5d\xbc\xd5\x24\x54\xed\x00\x0b\x32\x03\x61\xe8\x56\x82\x71\xe3\x76\x51\x33\x88\xd4\x2f\x7d\x6a\x19\x90\x8b\x86\x3c\xc6\x4c\xc1\x81\x29\x18\x7c\xb5\x7b\x54\x17\xd7\x6d\xe1\xae\x29\x09\x33\x8a\xe8\x83\x8a\x29\xf7\xee\x77\x6b\xb3\x2b\x22\x69\x45\x50\x55\x27\xd7\xde\xf3\x5a\x58\xc3\x01\x49\xa9\x73\x58\x5b\xab\xa9\xf1\x07\x9d\x24\x1c\x0a\xfb\xf3\xb8\x7b\x54\x85\xed\xb8\xcc\x6c\x92\x79\x7b\x9d\x02\x97\x6e\xf3\x6d\xa3\xa6\xda\x0c\x05\x9c\x83\x93\xdf\x15\xb9\x9f\xc7\x7b\xd6\x5f\x5d\x5d\xc2\x56\x96\x9a\x4a\xcf\x50\x8b\xf3\x84\x4a\xac\xe2\xfa\x1a\xea\x7d\x32\x1f\xb5\xb6\xd3\x0c\x72\x49\x2d\x3b\x23\x71\x2d\x12\x26\x83\x76\xf5\x88\xcf\xcb\x56\xca\xff\x34\x6e\xe0\x0d\xe5\x3e\x4f\xe0\x5f\xde\x2c\xf8\xfe\xbb\xff\xff\xd8\x93\x29\x70\x5d\x92\xa5\xff\x5c\xd2\xd9\x21\x9c\x63\xbe\x2f\x3a\x2d\x20\xa5\x1c\xf4\xce\xf7\x19\xd3\xcd\x56\x77\x70\x7d\xde\x4a\x5c\xf1\x02\x7e\x8d\xa3\x39\x33\xd9\x47\x9a\xcc\x9c\xa0\xc6\xe0\x43\x7b\x47\xa0\xf8\x77\xc7\xce\x82\x25\x66\x54\xee\xe1\xdd\x23\x92\xb3\xbe\xbd\x31\xda\x24\x76\x81\x31\xfd\xcc\x1d\xec\x1d\x11\x78\x39\x34\x75\x4c\xe4\xde\xee\x2d\xe2\x25\x5a\xe1\x02\xed\x5a\xea\x6b\xaa\x7c\xb3\x35\x74\x04\x4a\xcb\xf3\x3b\x04\xaa\x13\x7a\xea\x9d\x29\x58\xdc\x58\xea\xbd\x75\xbc\x1b\x3c\x93\x4c\xba\x72\x9a\xbc\x73\x29\xeb\xa4\x7e\x80\x77\x8a\x59\x8b\x9a\x7e\x9b\x3c\xa5\x49\x89\x11\xf1\x82\x7a\x4a\xd3\x13\x2a\x08\xb5\x58\x1b\xb8\x9f\x43\x88\x70\x5f\x1d\xc3\x49\xee\xf4\xff\xfe\x5b\x4d\x41\xbe\x28\x88\x11\xb4\x3d\xa0\xde\x2d\xb7\x0a\x49\x1d\x59\x03\xff\x80\x38\xc5\x55\x6c\x13\x15\x9f\x3f\xfa\x5b\x74\x46\x7f\xce\xe3\xe3\x6a\xcb\x2e\x57\x55\xb8\xa9\x1e\x51\xd5\x5f\x0f\x8a\xe8\x2d\xb9\x9f\x86\x4c\xf7\x76\x6a\x1d\x9e\x48\x4a\xd3\x19\x25\x0f\x9c\xed\xf8\x3a\xa1\xd1\xc2\x4a\xbd\x9d\xc0\x17\x70\x29\x0c\x21\x87\x47\xcf\xbd\x97\xa2\xa4\xd1\xff\x0b\x38\x59\x13\x13\xff\x04\x27\xef\xce\xc2\xbf\x7f\x38\x81\x93\x38\x76\xa7\x0d\x01\x44\x1f\xa5\xe0\x9f\x20\x4c\x76\x0b\xa1\xd0\xf4\x6b\x46\x98\x05\x3d\xb5\x47\x10\x52\x2d\x42\xaa\x62\x1c\xae\x80\xa5\xa9\x76\xac\xf3\x80\xde\x3b\x72\x97\x0a\xfd\x46\xe1\x06\x0a\x9a\x27\xb8\xe2\x62\x21\x23\x2e\xef\x04\x21\x1f\x87\x90\x0b\x97\x6c\xe8\x27\x39\x81\x55\x66\x1b\x85\x98\x8e\x22\xb9\x76\x6f\xb2\xf0\x35\xb4\xb0\xd5\xb6\xd1\x58\x8f\xcc\xa0\x89\xca\x79\x29\x6c\xe9\x87\x9e\xf3\x8b\xe8\xec\x22\xba\x88\xab\xa5\xb0\xfe\x1a\x92\xf2\x6b\x2b\x55\xc8\x8a\xf4\xaf\x17\x11\x37\xf2\xd6\xf8\x75\x68\x5b\xb9\xa1\xc5\x3f\x88\x1d\x21\xc3\xb4\x9d\x7f\x28\xc8\x6a\xd6\xe0\xd7\x3f\x77\xdb\x56\xeb\xba\x12\x10\xf4\x9a\x1e\x87\x34\xc1\xd0\xe3\xd0\x65\x0e\x10\x3c\xae\x58\xe0\xf1\xd9\xe3\xf3\x56\xc3\xd6\x66\xb4\x11\x16\x70\xc5\xdd\x80\x72\xf9\xf6\xed\x9b\x2b\xdf\xd6\xaa\x73\xb7\xe0\x9e\x5e\x53\x5b\x8e\xf5\x85\x5b\xf5\x44\xe6\x8a\xc2\x0f\x00\xe9\x8e\xbd\x5a\x91\xcd\x0b\x84\x46\x2f\x7a\xfe\xef\x1e\x20\xbb\x34\x3e\x02\x4e\xe7\xe1\xe4\x9f\x2f\xbd\x27\xcb\xdd\x5e\x36\x3d\x1d\x1f\xa7\xd5\x7f\x83\x38\x8b\xd2\xd6\xa2\xf8\x24\x3a\xa9\xad\x72\x1c\xf5\x97\x60\x16\xd1\x14\xc9\xed\x34\x78\x2f\x82\xd9\x2c\x42\x12\x3b\x6d\xd1\xc1\xfc\x21\xf0\xcd\x90\x92\x07\x3e\xf0\x4d\xdf\x85\x80\x66\x75\x77\xb1\x6f\x7a\xb5\x3a\xb0\xb2\x1f\xc2\xfa\xe3\x66\xf6\x47\x00\x00\x00\xff\xff\x30\x0c\x2f\x48\xf6\x11\x00\x00")

func examplesDefaultDefaultHsJsBytes() ([]byte, error) {
	return bindataRead(
		_examplesDefaultDefaultHsJs,
		"examples/default/default.hs.js",
	)
}

func examplesDefaultDefaultHsJs() (*asset, error) {
	bytes, err := examplesDefaultDefaultHsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "examples/default/default.hs.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _version = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x32\xd0\x33\xd4\x33\x00\x04\x00\x00\xff\xff\xb1\x21\x99\x2f\x05\x00\x00\x00")

func versionBytes() ([]byte, error) {
	return bindataRead(
		_version,
		"VERSION",
	)
}

func version() (*asset, error) {
	bytes, err := versionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "VERSION", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"examples/default/default.hs.js": examplesDefaultDefaultHsJs,
	"VERSION": version,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"VERSION": &bintree{version, map[string]*bintree{}},
	"examples": &bintree{nil, map[string]*bintree{
		"default": &bintree{nil, map[string]*bintree{
			"default.hs.js": &bintree{examplesDefaultDefaultHsJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

