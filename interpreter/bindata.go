// Code generated by go-bindata.
// sources:
// dslrunner.js
// DO NOT EDIT!

package interpreter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dslrunnerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x41\x6e\xdb\x3a\x10\x5d\xcb\xa7\x18\x64\x63\xea\xc7\x90\x92\xdf\xae\x54\x18\x45\xd1\xa6\x40\x36\x6d\x81\x2c\xba\x48\xdc\x82\x91\xc6\x92\x10\x89\x14\xc8\x51\xe2\xc0\xd0\x5d\x7a\x96\x9e\xac\x1c\x59\xa2\x2c\xc3\xe1\xc2\xc6\x70\xde\xcc\xe3\x7b\x1c\x91\x8a\xd2\x46\x25\x61\x6d\x61\x0d\xf7\x9b\xc5\x62\xdb\xaa\x94\x4a\xad\x80\x37\x41\x84\xb0\x5f\x2c\xc0\xad\x69\x5f\x95\x74\xdb\xe7\x1a\x69\x64\x6d\x7b\x44\x10\xc4\x31\x34\x46\x37\x68\xa8\x44\x0b\x0a\x31\x03\xd2\xf0\x88\x60\x91\xc0\x6a\xa0\x02\x5f\x21\x95\x8a\xb7\xb6\xba\x55\x19\xb4\xb6\x54\x39\x2c\x5f\x4a\x2a\x96\x3d\x45\xf0\x2c\x4d\x4f\xfb\x63\x6a\xb4\x76\xdd\x83\x20\x78\xc2\xd7\x04\x54\x5b\x55\x1c\x64\x68\xd3\x29\x4a\xeb\x6c\x0a\xb8\x3a\xe9\x7b\x8c\x91\x4d\x58\x56\x10\x74\x07\x19\x81\x41\x6a\x8d\x82\xdf\x11\xee\x08\x55\x26\xe6\x7c\x2b\x18\x44\xf5\xe0\xee\x44\x3a\xee\x30\xfd\xe9\x8e\xfb\x05\x2b\xcc\x25\x21\x08\x4e\xad\x20\x1b\x62\x6f\x16\x2f\x32\xaf\xc7\x21\x2f\xe7\x51\x41\xd4\xd8\x24\x8e\x0d\xe6\xb8\xbb\xbe\xba\x8e\x52\x5d\xc7\x26\x7e\xfc\xf6\xde\xde\xbd\x8b\xff\x3f\x85\x2b\x59\x23\x5b\x07\x69\xa5\x6d\x6b\x90\x9d\xb4\x24\xd3\x27\x32\x32\x75\xf6\x48\xb7\x55\x6b\xf7\x63\x50\x66\xf2\xb1\xc2\x59\x03\x3e\x9d\x73\x90\xff\x22\xd2\x77\x64\x9c\xe1\x22\x8c\x0c\x36\x95\xab\x16\xf1\xaf\x51\xd9\x83\xfd\xef\x41\xc4\x2b\xb8\xf0\x52\x53\xad\xb6\x65\xfe\xf9\xc0\x2a\x2e\xc2\xb9\x10\x7c\x96\x95\xe8\x6f\x4e\x78\xed\x7b\xb1\x84\xcb\x03\xe5\x25\x2c\x43\x11\x76\xcb\xf0\xc3\x54\xd6\xb9\xcb\xa7\xb4\x00\x81\xbb\x14\x1b\xe6\x08\x4f\xed\x19\x5b\x1d\xcf\xe3\x71\x9e\xcd\x60\xfb\x6f\x8c\xd1\xc6\xa5\x3d\x9e\x07\x82\x49\xe1\xfe\x66\x6c\xee\xd8\xda\xbc\xa0\x15\xf0\xa1\x3c\x25\x83\x36\xcb\xf3\xa4\x7d\x93\xf5\x9c\x24\x72\x96\xd5\x22\x9c\x44\xbc\x31\x16\x7c\x1b\xf4\xbd\xa7\xb0\x20\xa4\xc9\xed\x4c\x1c\xcf\xf5\xb6\x34\x96\x3e\x99\xdc\x51\x70\xfe\xfe\x6a\x33\x4b\x5b\x74\x8e\x67\x47\xf9\xeb\xcd\xd9\xf2\x5b\xfb\x75\xa4\x5d\xbb\x21\x2e\x7d\x28\x46\xc4\xd1\x55\x0d\xb3\xbe\x9f\x09\x3e\x0c\x78\x72\xae\xe3\x47\xd8\x77\x30\x65\x66\x65\xb3\x81\x78\xa3\xda\x6b\x4c\xfe\xfe\x99\x9d\xcd\xab\x0b\x1d\x6a\x92\x9a\x78\x0f\xf9\x9d\xe9\xce\xdb\xcc\xea\xf5\x60\xed\xfa\xc4\x6b\xb6\xba\xad\x51\x91\x0d\x27\xb0\xc2\x97\xfe\x7d\x5a\xfb\xa7\x4a\x0c\xf5\xd1\xf8\x71\xf7\xd8\xd3\xaf\xd9\xa3\x66\x52\x57\x63\xbf\xa1\x6a\x7a\x30\xa3\xa6\xb5\x85\xf0\xd9\xee\x5f\x00\x00\x00\xff\xff\xbf\x73\xd0\xba\x4b\x05\x00\x00")

func dslrunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_dslrunnerJs,
		"dslrunner.js",
	)
}

func dslrunnerJs() (*asset, error) {
	bytes, err := dslrunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dslrunner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dslrunner.js": dslrunnerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dslrunner.js": &bintree{dslrunnerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

