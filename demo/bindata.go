// Code generated by go-bindata.
// sources:
// demo.css
// demo.js
// demo.tmpl
// item.tmpl
// DO NOT EDIT!

package demo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _demoCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\xcd\x6e\xdb\x30\x0c\xbe\xfb\x29\x88\x0c\xbb\x14\x51\x92\x36\x49\xb7\xba\x97\x01\xeb\x6e\x1b\x7a\xd9\x0b\xd0\x32\x9d\x09\xb1\x44\x43\xa2\xdb\x78\x43\xdf\x7d\xf2\x4f\x12\xb8\xcd\x21\x05\x1a\x03\x06\x64\xeb\xfb\x21\x3f\x51\xf3\x2b\xf8\xfd\xf8\xf0\x08\x85\x71\x39\x20\x3c\x63\x03\xc2\xe0\x49\xbc\xa1\x27\x02\xf9\x43\xa0\xb9\x64\x1f\xa0\xf0\x6c\xa1\x60\x6f\x51\x84\xfc\xfc\xb0\x9a\x6d\x18\xae\xe6\x49\x92\x71\xde\xc0\xbf\x04\xe2\x53\xb0\x13\x55\xa0\x35\x65\x93\xc2\xe4\x67\xad\x4d\x8e\xf0\x9d\x5d\xe0\x92\x26\x53\xf8\xc5\x0e\x35\x4f\xc1\xb2\xe3\x50\xa1\xa6\xfb\xe4\x25\x49\x66\xb4\x23\x5d\x0b\xe5\x4a\xdb\x7c\x10\xea\xac\x53\xf8\xb4\xfc\x72\xbb\xc6\xd5\x7d\xf7\xcf\xa2\xdf\x18\xa7\x32\x16\x61\x9b\xc2\xcd\xba\xda\xf5\x7c\xd4\x62\x9e\x48\x59\x72\xf5\x14\x66\x15\x7a\x8a\x55\xec\xbf\x62\xf1\x95\xbc\x52\xd5\xab\xbb\x62\x71\x7b\x24\xc7\x02\x0f\xd0\xb8\x30\x42\x36\x0c\x94\xc1\x54\xb8\x4a\xe1\xfa\xe0\xb8\xa5\x26\xe2\xde\x96\xbb\xa2\x3b\x5c\xe8\x1e\xd3\xaa\xa8\x9c\x82\x1e\x21\xf7\x82\x25\x15\x12\x15\x17\xad\x22\xbc\x6a\x62\x80\x0a\xed\x24\x0a\x68\xf6\xd8\x96\x98\x42\xed\x72\xf2\xa5\x71\x43\x6c\x62\x2c\x8d\xfd\x37\x9e\x9a\x7e\x6f\xe8\xfe\x44\xb2\x27\xfc\xcf\x22\xec\x63\x3f\x86\x10\x24\xe7\x5a\x4e\xe4\xb4\xec\xbb\x7a\xcb\x5d\x1e\xec\xb2\xd8\xc6\xd6\xb8\x8d\xd2\xb5\x0f\xec\x3b\x91\x7d\x88\x37\x3f\x96\x0f\xab\xaf\xad\x80\x7a\xa6\x6c\x6b\x44\xa1\x33\x76\xc8\xe0\x3a\x40\xc7\x85\x20\x54\x29\x8a\xb3\x6b\x5c\x1c\xe1\x18\x76\x47\xb0\xfc\xf7\x3d\xe8\xf0\x0e\x30\x9f\x8f\x3d\x13\x18\x83\xf8\x16\x27\xa9\xf0\x68\x29\xc0\xa4\xc3\x4d\xba\x28\xda\x2b\x37\x6d\xef\xe3\xe8\x78\xc5\xa3\x0b\xfd\x78\xb7\x2e\x2f\xf1\x5d\x2f\x3e\x8f\x31\x59\x89\x7a\xdb\xef\xb6\xf2\x5d\x20\x47\x8f\xbe\x94\x8f\x75\x18\xce\xe8\xe2\x8d\x84\x8b\x5b\xf0\x45\x1d\xfe\x07\x00\x00\xff\xff\xe8\x4b\x51\xf4\x71\x05\x00\x00")

func demoCssBytes() ([]byte, error) {
	return bindataRead(
		_demoCss,
		"demo.css",
	)
}

func demoCss() (*asset, error) {
	bytes, err := demoCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "demo.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _demoJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x5d\x6e\xe3\x36\x10\x7e\x5e\x9f\x62\x6a\x14\x2b\x09\x88\xe5\xdd\x57\xc7\x76\xb0\xcd\x16\x48\xd0\x4d\x0b\x34\xdb\xa7\x20\x08\x68\x89\x8e\x84\x48\xa2\x40\x52\x49\x0c\x45\x77\xe9\x59\x7a\xb2\xce\x50\x7f\x94\x25\x37\x5d\x3f\xc8\x12\x67\x38\xf3\x71\x7e\x3e\xce\x33\x93\x70\xad\x79\x0a\x1b\xf8\x93\xb3\x40\xfb\x81\xe4\x4c\xf3\xcb\x84\x29\xe5\x96\x33\x00\xc9\xb3\x90\xcb\x15\xec\x8b\x2c\xd0\xb1\xc8\x5c\x0f\x68\x99\x04\xba\x90\x19\xac\xc3\xf8\x19\x02\x52\xff\x9d\xa5\x7c\x33\x8f\xd1\xd8\x7c\x6b\x34\xe8\xb7\x56\x39\xcb\x2c\xb9\xf3\xc4\x0f\xce\xb6\xd4\x51\xac\xfc\x5c\x8a\x5c\xf9\xb4\xe1\x37\x7e\xa8\xd6\x4b\x52\x3d\xbd\x73\x62\x0f\x6c\x36\xe0\x38\xf0\xf6\x06\x47\x32\x3f\xe4\x2a\x68\xa4\x17\xf4\x58\x81\x43\xeb\x0b\x5a\x77\x2a\x08\x59\xf6\xc8\xa5\x28\x54\x72\xb8\xe5\xfa\x3a\xcb\xb8\xbc\xfa\x7e\xf3\x6d\x53\x96\x0f\x0f\x91\x4e\x93\xd5\xa4\xc1\xaa\xda\xbe\x07\xd2\x09\xd2\x70\x7c\x3c\x1f\x57\x1b\x34\x1f\x3f\x8e\x4c\xd3\x43\xf9\x09\xcf\x1e\x75\x04\x5b\xf8\x44\x88\xb7\x04\x79\xc2\xca\x20\x4a\xeb\x25\xc6\x7e\x7b\x8e\xef\xd5\xac\xf2\xce\x67\x33\x4a\xe6\x0d\xcf\x8a\x1f\x4f\x26\xed\x34\x38\x70\xeb\x34\xbe\x94\xe5\x6e\xb7\x8d\x27\xed\x46\x80\x0f\x6d\x21\x98\x32\x6a\x32\xb3\x29\x79\xe2\x63\xaa\x2b\xb3\x60\xbe\xe8\xa5\x5a\xd6\xc8\x2b\x6f\xd6\xb9\xd5\x92\xc5\xc9\xb7\xfa\xf4\x03\xe7\x46\xd0\xc4\x65\xa8\x3d\xa5\x37\xc0\x47\xbe\xce\x20\x7e\xf5\xca\x2e\x53\xe6\x84\xea\x0b\xca\x9f\x39\xee\x8f\x5f\x29\x21\xb6\xef\x05\x7c\xee\x94\xa7\x6b\xbb\xec\xf6\x63\x86\x98\x79\x5b\xa4\x18\x6e\xcc\xd5\x3f\x7f\x3b\x39\xc3\xe8\xea\x7a\xa1\x82\x27\x8a\x81\x09\x1f\x45\x61\x5b\xf6\x45\x54\x67\x6d\x10\x86\xc6\x9d\xdb\xf8\x3f\x6e\x29\x32\x69\xb5\x54\x69\x50\x57\x7d\x0d\x4e\x74\xa0\x9a\xd7\x2e\x95\xed\x6e\x4a\x99\x99\x80\xa1\xfa\x71\x25\xcf\x11\xf7\x7c\x8b\x8b\x01\xdf\x31\xd9\x94\x1d\xec\x58\xf0\xf4\x8e\x45\x4c\x4a\x9a\x6b\x0b\x2f\xfd\x2e\xc0\xee\x89\x42\x71\x79\x19\x89\x38\xa0\x48\x4e\xaf\x63\x44\x47\xbd\xb5\x4b\xe2\xec\x29\xce\x1e\x17\x41\x21\x95\x90\xce\xf6\xad\x81\x65\xc5\xc2\xc6\x66\x7d\x78\x13\x5d\x72\x29\x32\x2d\x45\x92\x70\x79\xb2\x5f\x1e\x89\x1c\x62\x1d\xb3\xe4\x56\xa3\xe0\x34\x0b\x96\xa6\x1c\x50\x25\xa4\x2e\x50\x2b\xb8\x33\xe1\x1f\xf5\xf0\x59\x5d\x72\x28\x3f\x12\xdc\x57\xf7\x95\xc1\x78\x86\x8f\x88\x65\x61\xc2\xff\xea\xa2\x61\xf9\xed\x43\x44\x08\x0c\x84\x78\x0f\xd6\x72\xcd\x33\x5e\x03\xac\x6f\x33\x3c\x93\xfe\x62\x83\x6c\x9b\x48\xd1\xc9\xfc\x21\xfe\xbb\x93\x92\x96\xa7\xb0\x5b\xee\x67\xa3\xae\x1c\x39\x69\x9a\x53\x25\x88\xcc\xf5\x3a\xfd\x8c\xbf\x6a\x12\x9f\xc2\x0f\x4e\xcf\x2f\xb5\x82\x4d\x06\xa4\xf2\xb9\x3b\x61\xab\x55\x6b\xe4\x22\x6f\xfc\xd0\xaf\xf5\x03\x4d\xab\xdf\x0d\xcc\x98\x33\xb4\xaa\x36\x02\x70\xda\xba\x77\xea\x3e\x05\x9e\x28\x6e\x21\xb2\xec\x3e\xf8\xfb\x38\x0b\xdd\xf1\xc9\x7b\xee\x3c\x83\x49\xe2\x1c\x50\x4d\x4d\x97\x74\xb2\x1e\x48\xa7\x57\x79\x83\x58\xf4\xde\x51\x1b\x09\x1d\x01\xf0\x70\x14\x0f\x0b\x63\xfb\x6a\xe0\x4c\x9a\x32\x37\xd4\x4f\x75\xe5\x0c\xf1\x9d\xae\x84\xbc\x50\x91\xdb\x94\x79\x6b\xc7\x42\x7a\x84\x61\x3a\x40\xfd\x11\x8f\x43\x6c\xa5\x94\xfc\xb4\x96\x7a\xfb\x75\xd3\x57\x75\x11\x8e\xad\x0f\xf2\x69\xc5\x74\xf6\xe3\x87\xea\x9a\xb6\x26\x5e\xcf\x32\xc1\xb5\x21\x06\x77\xd4\xff\x27\x3d\xb4\x9c\xff\x82\x55\x23\x5e\x7c\x15\x10\x05\x7d\x17\xee\xa7\xb3\x50\x04\x05\x52\xbd\xf6\x77\x22\x3c\x34\x82\x2b\x1e\x3f\x46\xda\xeb\x98\x21\x40\x6e\x15\x19\x2a\x7d\x8d\xc3\x1b\x51\x64\xda\xed\xae\x38\xea\x2b\xc5\x93\x7d\xd3\xd7\xcd\xea\xd0\xa8\xc8\xb0\xc8\x72\xc9\x15\xdd\xf3\x7d\x51\x5a\xd7\x24\x59\xf0\x8f\xf9\xc7\xbd\xd5\x12\x79\xd7\xdf\x23\xb5\x5f\x46\x4c\x5e\x8a\x90\xbb\xdc\x7f\x89\xe2\x20\xf2\xda\x8c\xf4\xf4\x35\x39\x65\x4c\x8f\x19\x93\x39\x78\x77\xd4\x68\xa6\x09\x6b\xac\xba\x68\x35\xe8\xb1\x36\x33\x90\x49\x96\x99\x3c\xea\xb4\x1d\x4d\x22\x56\x4d\x98\xc5\xfe\x13\x87\x14\x58\x0d\xec\x59\x77\xca\x87\x36\x50\x47\xd7\x9e\xc3\x5f\x79\x50\xe0\x11\x16\x66\x02\x5c\xee\xe2\x6c\xb9\x63\x0a\x49\x26\x00\xa7\xb4\x00\x57\xce\xe0\x8e\x3a\x69\x4f\xe9\x50\x14\xda\x19\xe9\xd1\xcf\xd5\x11\x07\x94\xe6\x85\x06\xb1\x07\xfa\xc2\xc2\x48\x31\x6b\xf0\x22\x8a\x24\x84\x1d\x87\x30\x56\x79\xc2\x0e\x3c\x84\x88\x4b\xee\x8d\xdc\x0d\x2f\xf1\xa3\xa5\xaa\xa7\x6a\x1d\xa7\xd4\x41\xa9\xa0\x2a\x72\x3d\x7f\x2f\x64\xca\xb4\xeb\x5c\x5d\xad\xd2\xd4\x31\x95\xf9\xbf\x06\x98\xfe\xb6\x9d\x0f\x67\x87\xf1\xe4\x41\x2e\x71\x7e\xa1\xbf\x76\xde\x85\x9f\x21\x52\xb0\xd8\x83\xbf\x2c\xf7\x31\xf2\x37\x33\xb2\xe1\x20\xb2\x93\x4b\x6b\x4a\xaa\xc7\x9f\xff\x1e\x05\xcc\xad\xff\xf5\x8f\x1b\xbf\x2e\x59\xc2\xbf\x3e\x1a\x0d\xea\xaa\xa9\x4b\x66\xb9\xa5\xf2\xee\x5a\x0a\xa7\x83\x5f\x13\x4e\xaf\xbf\x1c\xae\x43\xd7\x09\x70\x17\x43\x2e\x96\x8e\x37\xf3\xce\xff\x0d\x00\x00\xff\xff\x4f\x99\x9e\xa6\x5a\x0d\x00\x00")

func demoJsBytes() ([]byte, error) {
	return bindataRead(
		_demoJs,
		"demo.js",
	)
}

func demoJs() (*asset, error) {
	bytes, err := demoJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "demo.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _demoTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x4f\x8f\x9b\x30\x10\xc5\xef\x7c\x0a\xd7\x97\x9c\xb0\xf3\xa7\x55\xa3\x0a\xb8\x24\x8d\xda\x5e\xda\x43\x7a\xe8\xd1\xd8\x13\xe1\xc8\xc6\xc8\x9e\xa4\x89\x22\xbe\xfb\x9a\x18\x76\x57\xda\x2b\x5c\x46\x33\x1e\xde\xef\x21\x3f\x8a\x4f\xfb\xdf\xbb\xe3\xbf\x3f\xdf\x49\x83\xd6\x54\x59\x31\x15\x10\xaa\xca\x48\x7c\x0a\x0b\x28\x88\x6c\x84\x0f\x80\x25\xfd\x7b\x3c\xe4\x5b\x4a\xf8\x78\x88\x1a\x0d\x54\x3f\x1c\x86\x06\x8c\x21\x0a\xac\x23\x39\x79\x3c\xd8\x4f\x04\xcb\xf6\x10\x64\xdf\x17\x3c\x6d\xa5\x37\x82\xf4\xba\x43\x12\xbc\x2c\x69\x83\xd8\x85\x6f\x9c\x4b\xd5\x9e\x03\x93\xc6\x5d\xd4\xc9\x08\x0f\x4c\x3a\xcb\xc5\x59\xdc\xb8\xd1\x75\xe0\x1e\x84\x44\xbe\x64\xab\xcf\xec\x6b\x6a\x98\xd5\x2d\x3b\x07\x5a\x15\x3c\xe9\xcd\x29\x9e\x2b\x67\x67\x04\xd4\xa2\x06\x93\x4b\xe7\x81\x7f\x61\x5b\xb6\xde\xf0\xda\xbb\xff\x01\xfc\x8c\x8c\x4b\xab\xc0\x87\x81\x11\x05\xf9\x2a\x62\x36\xef\x66\xf9\x7c\x20\xeb\x2c\xb4\x38\x40\xd6\x6c\xb5\x66\xcb\x69\xf0\x91\x30\x22\xf0\x1e\x6f\x3e\xe6\x61\x17\xc2\x90\x84\xd4\x67\x05\x4f\x01\x2b\x6a\xa7\xee\xb1\x28\x7d\x25\x5a\x95\x54\xba\x16\x85\x6e\xc1\x0f\x4a\x71\x18\x8f\x5e\xf5\xae\xc2\x13\x1d\x53\x45\xca\x98\xaf\x58\x3b\x23\x10\x08\x1d\x46\x94\x3c\xf3\xd6\xf7\xcf\xa5\x93\x36\xd0\x0a\x0b\x71\x71\x11\xc9\x87\xb1\xed\xfb\x45\x96\xbd\xf9\x9b\xbe\x1e\xef\x1d\x94\x14\xe1\x86\xe9\xa6\xe8\xe0\xf6\x57\x32\x3b\xad\xf2\xd1\x26\x7f\xfe\x1d\x2f\x01\x00\x00\xff\xff\x27\x72\x5c\x2e\x34\x03\x00\x00")

func demoTmplBytes() ([]byte, error) {
	return bindataRead(
		_demoTmpl,
		"demo.tmpl",
	)
}

func demoTmpl() (*asset, error) {
	bytes, err := demoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "demo.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _itemTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\xb1\x0e\xc2\x20\x10\x86\x77\x9e\xe2\xd2\x98\x74\x69\x78\x00\x12\x27\x5d\x8c\xa3\xa3\x71\x20\xe5\x34\x44\x21\xc6\xb2\xd4\xf3\xde\xdd\xe3\xd0\xa6\xff\x02\x07\x5f\xbe\x1f\x88\x02\x5e\x63\x46\xe8\x62\xc1\xd4\x31\x1b\x32\x20\x09\x38\x8d\x0e\x7a\x22\xbb\x97\x1d\x7c\xe0\xe4\x73\x2c\xf1\x8d\xcc\xfd\xa0\xc4\x98\x42\x03\x76\x29\x2c\x87\x55\x32\x39\x38\xeb\x50\x43\xf4\xf2\xf9\x86\xb0\xa9\x37\xe0\xb6\x60\x0f\x15\x91\x1e\x58\x85\xee\x38\xab\x4c\x31\x7b\xc4\xb9\x1a\xd5\xe6\x44\x21\xcb\xf3\xe1\xcb\xff\x91\x4d\xc6\xcc\xc3\xaa\x06\x73\xf8\x49\x2f\x46\x3e\xd1\xe6\x6f\x00\x00\x00\xff\xff\x1f\xab\xd5\x81\xde\x00\x00\x00")

func itemTmplBytes() ([]byte, error) {
	return bindataRead(
		_itemTmpl,
		"item.tmpl",
	)
}

func itemTmpl() (*asset, error) {
	bytes, err := itemTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "item.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"demo.css": demoCss,
	"demo.js": demoJs,
	"demo.tmpl": demoTmpl,
	"item.tmpl": itemTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"demo.css": &bintree{demoCss, map[string]*bintree{}},
	"demo.js": &bintree{demoJs, map[string]*bintree{}},
	"demo.tmpl": &bintree{demoTmpl, map[string]*bintree{}},
	"item.tmpl": &bintree{itemTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

